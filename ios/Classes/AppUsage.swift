// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum ResultState: Int {
  case success = 0
  case error = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct TimeLimitResult {
  var state: ResultState
  var message: String

  static func fromList(_ list: [Any?]) -> TimeLimitResult? {
    let state = ResultState(rawValue: list[0] as! Int)!
    let message = list[1] as! String

    return TimeLimitResult(
      state: state,
      message: message
    )
  }
  func toList() -> [Any?] {
    return [
      state.rawValue,
      message,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UsedApp {
  var id: String
  var name: String
  var minutesUsed: Int64

  static func fromList(_ list: [Any?]) -> UsedApp? {
    let id = list[0] as! String
    let name = list[1] as! String
    let minutesUsed = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)

    return UsedApp(
      id: id,
      name: name,
      minutesUsed: minutesUsed
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      minutesUsed,
    ]
  }
}

private class AppUsageApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return TimeLimitResult.fromList(self.readValue() as! [Any?])
    case 129:
      return UsedApp.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class AppUsageApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? TimeLimitResult {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? UsedApp {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class AppUsageApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return AppUsageApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return AppUsageApiCodecWriter(data: data)
  }
}

class AppUsageApiCodec: FlutterStandardMessageCodec {
  static let shared = AppUsageApiCodec(readerWriter: AppUsageApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AppUsageApi {
  func getPlatformVersion(completion: @escaping (Result<String?, Error>) -> Void)
  func getApps(completion: @escaping (Result<[UsedApp], Error>) -> Void)
  func setAppTimeLimit(appId: String, durationInMinutes: Int64, completion: @escaping (Result<TimeLimitResult, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AppUsageApiSetup {
  /// The codec used by AppUsageApi.
  static var codec: FlutterStandardMessageCodec { AppUsageApiCodec.shared }
  /// Sets up an instance of `AppUsageApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AppUsageApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getPlatformVersionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_usage.AppUsageApi.getPlatformVersion\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPlatformVersionChannel.setMessageHandler { _, reply in
        api.getPlatformVersion { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getPlatformVersionChannel.setMessageHandler(nil)
    }
    let getAppsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_usage.AppUsageApi.getApps\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAppsChannel.setMessageHandler { _, reply in
        api.getApps { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getAppsChannel.setMessageHandler(nil)
    }
    let setAppTimeLimitChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_usage.AppUsageApi.setAppTimeLimit\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAppTimeLimitChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appIdArg = args[0] as! String
        let durationInMinutesArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        api.setAppTimeLimit(appId: appIdArg, durationInMinutes: durationInMinutesArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setAppTimeLimitChannel.setMessageHandler(nil)
    }
  }
}
